jQuery(document).ready(function (e) { var t = [{ titre: "GRATUIT", body: ["Créneau horaire de 120 min", "Délai de traitement de 72 heures", "Minimum de commande : 15,00€"], montant: 0, type: "free", creneau: 120, delai: 3, id: 31058498125884, active: !1 }, { titre: "PLUS", body: ["Créneau horaire de 60 min", "Délai de traitement de 48 heures", "Minimum de commande : 15,00€"], montant: 9.99, type: "plus", creneau: 60, delai: 2, id: 31058498158652, active: !1 }, { titre: "EXPRESS", body: ["Créneau horaire de 30 min", "Délai de traitement de 24 heures", "Minimum de commande : 15,00€"], montant: 19.99, type: "express", creneau: 30, delai: 1, id: 31058498191420, active: !1 }]; Vue.component("selection_horaire", { delimiters: ["${", "}"], template: "#templatehoraireselection", props: { id_html: { type: String, default: "" }, titre: { type: [String], default: "Sélectionner les horaires de récupération" }, type: { type: String, default: "" }, delai_traitement_en_jour: { type: [Number], default: 3 }, plage_mn: { type: [Number], default: 120 }, maj__date_select: { type: String, default: "" }, default__creneau: { type: [String, Object], default: "" }, creneau_update: { type: [String, Object], default: "" }, re_construction_module: { type: [Number], default: 0 }, default_date: { type: [String, Object], default: "" } }, data: function () { return { dates_tabs: [], horaires: [], months: [], current_date: "", date_select: "", date_debut_default: 0, number_day: 2, diff_day: 0, periode_day_valide: 21, decalage_heure: 4, periodicite: 30, update__creneau_livraison: "", plage_heure: !0, show_date: !1, show_texte_error: !1, update_builder_is_running: !1, builder_is_running: !1, selection_metafields: window.selection_plage_heure, remove_hours: {} } }, watch: { perfom__date_select: function (e) { this.update_date_livraiosn() }, perfom__creneau: function (e) { this.update_creneau_livraiosn() }, re_construction_module: function () { this.re_builder() } }, computed: { perfom__date_select: { get: function () { return this.maj__date_select } }, perfom__creneau: { get: function () { return this.creneau_update } } }, mounted: function () { this.selection_metafields && (this.selection_metafields = JSON.parse(this.selection_metafields), this.selection_metafields = this.selection_metafields.selection_plage_heure, console.log(this.selection_metafields)), window.wbu_date_now ? this.current_date = new Date(this.get_date_for_old_browser(window.wbu_date_now)) : this.current_date = new Date(this.get_date_for_old_browser()), this.builder() }, methods: { update_date_livraiosn: function () { var e = this; if ("livraison" == this.type) { !function t() { if (e.update_builder_is_running || e.builder_is_running) setTimeout(function () { console.log("builder_update is waiting"), t() }, 300); else { var a = new Date(e.get_date_for_old_browser(e.perfom__date_select)); e.date_select = e.addDays(a, e.delai_traitement_en_jour), e.date_select.setHours(e.current_date.getHours()), e.date_select.setMinutes(e.current_date.getMinutes()), e.date_select.setSeconds(e.current_date.getSeconds()), e.send__date_select(), e.diff_day = e.get_diff_day(e.current_date, e.date_select), e.builder_update(), e.update__creneau_livraison = "" } }() } }, get_date_for_old_browser: function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null; if (!e) return moment(); var t = moment(e); return t.isValid() ? t : (t = e.split("-"))[2] ? (t[1] = t[1].toString().padStart(2, "0"), t[2] = t[2].toString().padStart(2, "0"), moment(t[0] + "-" + t[1] + "-" + t[2])) : moment(e) }, update_creneau_livraiosn: async function () { "livraison" == this.type && (await this.build_creneaux(), await this.select_plage_heure()) }, re_builder: function () { var e = this; this.update__creneau_livraison = "", function t() { e.builder_is_running || e.update_builder_is_running ? setTimeout(function () { console.log(" Re_builder is waiting "), t() }, 300) : (e.horaires = [], e.dates_tabs = [], e.months = [], e.builder()) }() }, builder_update: function () { var e = this; function t(t) { return new Promise(function (a, i) { 1 == t ? a({ etape: t, resul: e.build_tabs() }) : 2 == t ? a({ etape: t, resul: e.build_creneaux() }) : 3 == t ? a({ etape: t, resul: e.buildCalendarMounth() }) : i({ etape: t }) }) } function a(t) { e.update_builder_is_running = !1, t.etape || console.log("Error on builder stopExecution : ", t) } this.update_builder_is_running = !0, t(1).then(function e(i) { t(i.etape + 1).then(e, a).catch(function (e) { console.log("Error builder catch : ", e) }) }, a).catch(function (e) { console.log("Error builder catch : ", e) }) }, display_errors_plage_heure: function (e) { return 0 == e.length && !this.show_date && "Aucune plage disponible pour cette journée" }, builder: async function () { this.builder_is_running = !0; await this.get_select_date(), await this.build_tabs(), await this.build_creneaux(), await this.buildCalendarMounth(), await this.send__date_select(), await this.select_plage_heure(); return this.builder_is_running = !1, !1 }, get_select_date: function () { return "recuperation" == this.type ? (this.builder_is_running && "" != this.maj__date_select && this.valid_default_date() > 0 ? this.date_select = new Date(this.get_date_for_old_browser(this.maj__date_select)) : this.date_select = this.addDays(this.current_date, this.date_debut_default), this.diff_day = this.get_diff_day(this.current_date, this.date_select), "get_select_date") : "livraison" == this.type ? (this.builder_is_running && "" != this.maj__date_select && this.valid_default_date() > 0 ? this.date_select = new Date(this.get_date_for_old_browser(this.maj__date_select + "T00:00:00")) : this.date_select = this.addDays(this.current_date, this.date_debut_default + this.delai_traitement_en_jour), this.diff_day = this.get_diff_day(this.current_date, this.date_select), "get_select_date") : void 0 }, valid_default_date: function () { var e = this.current_date; return e.setHours(0), e.setMinutes(0), e.setSeconds(0), this.get_diff_day(e, this.maj__date_select, !1) }, send__date_select: function () { return this.$emit("ev_date_to_save", { type: this.type, date: this.date_select }), "send__date_select" }, addDays: function (e, t) { var a = new Date(this.get_date_for_old_browser(e)); return 0 == t ? a : (a.setDate(a.getDate() + t), a) }, build_tabs: function () { this.dates_tabs = []; for (var e = 0, t = this.current_date; e < this.number_day;) { var a = this.addDays(this.date_select, e), i = a.getDay(), n = a.getDate(); 1 == n && (n = "1er"); var r = { jour: i = 0 == this.get_diff_day(t, a) ? "Aujourd'hui" : 1 == this.get_diff_day(t, a) ? "Demain" : this.getDayFrench(i), mois: n + " " + this.getMonthFrench(a.getMonth()), index: a.getDay(), date: a.getDate(), month: a.getMonth(), year: a.getFullYear(), active: 0 == e }; this.dates_tabs.push(r), e++ } return this.dates_tabs.push({ jour: "Plus de dates", mois: "afficher le calendrier", index: "all" }), "build_tabs" }, getDayFrench: function (e) { var t = ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"]; return t[e] ? t[e] : t[0] }, getMonthFrench: function (e) { var t = ["Janvier", "février", "Mars", "Avril", "Mai", "Juin", "Juiellet", "Aout", "Septembre", "Octobre", "Novembre", "Decembre"]; return "small" == (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "all") && (t = ["jan.", "fév.", "Mar.", "Avr.", "Mai.", "Jui.", "Jui.", "Aout.", "Sep.", "Oct.", "Nov.", "Dec."]), t[e] ? t[e] : t[0] }, get_diff_day: function (e, t) { var a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2]; e = new Date(this.get_date_for_old_browser(e)), t = new Date(this.get_date_for_old_browser(t)); if (a) var i = Math.abs(t - e); else i = t - e; var n = i / 864e5; return Math.round(n) }, select_date_tab: function (t) { var a = this, i = []; "all" == t ? (this.plage_heure = !1, this.show_date = !0) : (this.plage_heure = !0, this.show_date = !1), e.each(this.dates_tabs, function (e, n) { n.index == t ? (n.active = !0, "all" != t && (a.update__date_select(a.translate_date_to_valid(n)), "recuperation" == a.type && a.$emit("ev_reload_livraison__date", n))) : n.active = !1, i.push(n) }), this.dates_tabs = i, "livraison" == this.type && (this.update__creneau_livraison = "") }, translate_date_to_valid: function (e) { if (e.date && e.month && e.year) { var t = e.date; return e.date < 10 && (t = "0" + e.date), new Date(this.get_date_for_old_browser(e.year + "-" + (e.month + 1) + "-" + t)) } return this.date_select }, update__date_select: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.date_select = e, this.date_select.setHours(this.current_date.getHours()), this.date_select.setMinutes(this.current_date.getMinutes()), this.date_select.setSeconds(this.current_date.getSeconds()), this.diff_day = this.get_diff_day(this.current_date, this.date_select), this.send__date_select(), this.build_creneaux(), t && this.build_tabs() }, build_creneaux: async function () { var e = this; return new Promise(async function (t, a) { console.log("build_creneaux : ", e.date_select), e.horaires = []; var i = e.creneau_parjour(e.date_select.getDay()); await e.perfom_build_creneaux(i), e.show_date = !1, e.plage_heure = !0, t("build_creneaux") }) }, perfom_build_creneaux: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "matinee", a = this; return new Promise(async function (i, n) { var r = e; e.matinee ? "matinee" == t ? r.matinee && await a.buildHoraire(r.matinee, t, e) : "soir" == t && r.soir && await a.buildHoraire(r.soir, t, e) : r.soir && await a.buildHoraire(r.soir, "soir", e), i("perfom_build_creneaux") }) }, buildHoraire: async function (e, t, a) { var i = this; return new Promise(async function (n, r) { if (!e.ht_debut || !e.ht_fin) return n("buildHoraire"), !1; var s = parseInt(e.ht_debut), _ = parseInt(e.ht_fin), o = parseInt(e.mn_debut), d = parseInt(e.mn_fin), u = new Date(i.get_date_for_old_browser(i.date_select)); function l() { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, t = arguments.length > 1 ? arguments[1] : void 0, a = arguments.length > 2 ? arguments[2] : void 0; return new Promise(function (n, r) { var s = {}, o = c_mn = null, l = t + e, c = !0, h = !1; u.setHours(l), u.setMinutes(a), o = u.getHours(), c_mn = u.getMinutes(), i.remove_hours && i.remove_hours[o + "-" + c_mn] && (h = !0), o < 10 && (o = "0" + o), c_mn < 10 && (c_mn = "0" + c_mn), s.h1 = o + ":" + c_mn, u.setHours(l), u.setMinutes(a + i.plage_mn), o = u.getHours(), c_mn = u.getMinutes(), o < 10 && (o = "0" + o), c_mn < 10 && (c_mn = "0" + c_mn), s.h2 = o + ":" + c_mn, parseInt(o) > _ ? c = !1 : parseInt(o) == _ && parseInt(c_mn) > d && (c = !1), c ? (h || function (e) { i.builder_is_running && i.perfom__creneau && i.perfom__creneau.h1 && i.perfom__creneau.h1 == e.h1 && i.perfom__creneau.h2 == e.h2 && (e.active = !0); i.horaires.push(e) }(s), n({ etape: e, mn: a })) : r({ etape: e, mn: a }) }) } function c(e) { e.etape, h() } async function h() { "matinee" == t && await i.perfom_build_creneaux(a, "soir"), n("buildHoraire") } return l(0, s, o).then(function e(t) { t.etape + s + Math.round(i.plage_mn / 60) <= _ ? (i.type, 0 == o && (t.mn + i.periodicite < 60 ? l(t.etape, s, t.mn + i.periodicite).then(e, c) : l(t.etape + 1, s, o).then(e, c)), 0 != o && (t.mn + i.periodicite <= 60 ? l(t.etape, s, t.mn + i.periodicite).then(e, c) : l(t.etape + 1, s, o).then(e, c))) : h() }, c), null }) }, creneau_parjour: function (t) { var a = this; a.remove_hours = {}; var i = [{}, { matinee: { ht_debut: 8, mn_debut: 0, ht_fin: 21, mn_fin: 30 } }, { matinee: { ht_debut: 8, mn_debut: 0, ht_fin: 21, mn_fin: 30 } }, { matinee: { ht_debut: 8, mn_debut: 0, ht_fin: 21, mn_fin: 30 } }, { matinee: { ht_debut: 8, mn_debut: 0, ht_fin: 21, mn_fin: 30 } }, { matinee: { ht_debut: 8, mn_debut: 0, ht_fin: 21, mn_fin: 30 } }, { matinee: { ht_debut: 8, mn_debut: 0, ht_fin: 21, mn_fin: 30 } }], n = {}; if (n = i[t] ? i[t] : i[0], "recuperation" == this.type && this.diff_day == this.date_debut_default || "livraison" == this.type && this.diff_day == this.delai_traitement_en_jour + this.date_debut_default) { var r = this.current_date.getHours(), s = 0; n.matinee && n.matinee.ht_fin >= r + Math.round(this.plage_mn / 60) + this.decalage_heure ? (s = r + this.decalage_heure) > n.matinee.ht_debut && (n.matinee.ht_debut = s) : delete n.matinee, n.soir && n.soir.ht_fin >= r + Math.round(this.plage_mn / 60) + this.decalage_heure ? (s = r + this.decalage_heure) > n.soir.ht_debut && (n.soir.ht_debut = s) : delete n.soir } if ("livraison" == this.type && !this.update_builder_is_running) { var _ = this.date_select; _.setHours(0), _.setMinutes(0), _.setSeconds(0); var o = this.current_date; if (o.setHours(0), o.setMinutes(0), o.setSeconds(0), this.default_date ? o = this.default_date : this.perfom__date_select && (o = this.perfom__date_select), this.get_diff_day(_, o) == this.delai_traitement_en_jour + this.date_debut_default ? this.update__creneau_livraison = this.perfom__creneau : this.update__creneau_livraison = "", this.update__creneau_livraison && this.update__creneau_livraison.h1 && "" != this.update__creneau_livraison.h1) { var d = this.update__creneau_livraison.h1.split(":"), u = this.date_select; d[0] = parseInt(d[0]), d[1] = parseInt(d[1]), n.matinee && (d[0] && n.matinee.ht_debut <= d[0] && n.matinee.ht_fin > d[0] ? (u.setHours(d[0]), u.setMinutes(d[1] + this.periodicite), n.matinee.ht_debut = u.getHours(), n.matinee.mn_debut = u.getMinutes()) : d[0] && delete n.matinee), !n.matinee && n.soir && (d[0] && n.soir.ht_debut <= d[0] && n.soir.ht_fin >= d[0] ? (u.setHours(d[0]), u.setMinutes(d[1] + this.periodicite), n.soir.ht_debut = u.getHours(), n.soir.mn_debut = u.getMinutes()) : d[0] && delete n.soir) } } var l = this.date_select; return a.selection_metafields && a.selection_metafields.livraison && "livraison" == a.type && e.each(a.selection_metafields.livraison, function (e, t) { t.mn_debut || (t.mn_debut = 0), l && t.date == l.getDate() + "/" + (l.getMonth() + 1) + "/" + l.getFullYear() && (n.matinee && t.ht_debut < n.matinee.ht_fin ? a.remove_hours[t.ht_debut + "-" + t.mn_debut] = { hr: t.ht_debut, mn: t.mn_debut } : n.soir && (a.remove_hours[t.ht_debut + "-" + t.mn_debut] = { hr: t.ht_debut, mn: t.mn_debut })) }), a.selection_metafields && a.selection_metafields.recuperation && "recuperation" == a.type && e.each(a.selection_metafields.recuperation, function (e, t) { t.mn_debut || (t.mn_debut = 0), l && t.date == l.getDate() + "/" + (l.getMonth() + 1) + "/" + l.getFullYear() && (n.matinee && t.ht_debut < n.matinee.ht_fin ? a.remove_hours[t.ht_debut + "-" + t.mn_debut] = { hr: t.ht_debut, mn: t.mn_debut } : n.soir && (a.remove_hours[t.ht_debut + "-" + t.mn_debut] = { hr: t.ht_debut, mn: t.mn_debut })) }), n }, buildCalendarMounth: function () { if (!this.valid_date()) return !1; this.months = []; var e = this.current_date.getDay(), t = null; return t = 0 == e ? 7 : e, this.buildCalendar(-t, !1), "buildCalendarMounth" }, buildCalendar: function (e, t) { var a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1; if (1 == a) this.CalendarMounth(e, t); else if (2 == a) { var i = 31 + e; this.CalendarMounth(i, !0) } }, CalendarMounth: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -25, a = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this, n = new Date(this.get_date_for_old_browser(this.current_date)), r = 1; if (t < 0) { for (r = -1; r >= t;)i.months.push({ status: a, date_french: n.getDate().toString().padStart(2, "0"), date: n.getDate(), day: n.getDay(), month: n.getMonth(), month_french: i.getMonthFrench(n.getMonth(), "small"), year: n.getFullYear() }), n.setDate(n.getDate() - 1), r--; i.months.shift(), i.months.reverse(), this.buildCalendar(t, !0, 2) } else { r = 1; for (var s = []; r <= t;)a = !0, "recuperation" == i.type ? (r <= i.date_debut_default || r > i.periode_day_valide) && (a = !1) : "livraison" == i.type && (r <= i.date_debut_default || r <= i.diff_day || r > i.periode_day_valide) && (a = !1), s.push({ status: a, date_french: n.getDate().toString().padStart(2, "0"), date: n.getDate(), day: n.getDay(), month: n.getMonth(), month_french: i.getMonthFrench(n.getMonth(), "small"), year: n.getFullYear() }), n.setDate(n.getDate() + 1), r++; e.each(s, function (e, t) { i.months.push(t) }) } }, select_date_day: function (e) { e.status && (this.dates_tabs = [], this.update__date_select(this.translate_date_to_valid(e), !0), this.plage_heure = !0, this.show_date = !1, "recuperation" == this.type && this.$emit("ev_reload_livraison__date", e), "livraison" == this.type && (this.update__creneau_livraison = "")) }, valid_date: function () { return this.diff_day + this.delai_traitement_en_jour > this.periode_day_valide ? (this.show_texte_error = !0, !1) : (this.show_texte_error = !1, !0) }, select_plage_heure: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, a = this, i = [], n = ""; return this.default__creneau && "" != this.default__creneau && this.builder_is_running ? ((n = a.default__creneau.split("-"))[0] = n[0].trim(), n[1] = n[1].trim(), t = null) : a.perfom__creneau && "" != a.perfom__creneau && !a.perfom__creneau.h1 && ((n = a.perfom__creneau.split("-"))[0] = n[0].trim(), n[1] = n[1].trim(), t = null), e.each(a.horaires, function (e, r) { n && n[0] && n[0] == r.h1 && n[1] == r.h2 ? (r.active = !0, i.push(r), a.builder_is_running && "livraison" == a.type && a.send__creneau(r)) : e == t ? (r.active = !0, i.push(r), a.send__creneau(r)) : (r.active = !1, i.push(r)) }), a.horaires = i, "select_plage_heure" }, send__creneau: function (e) { this.$emit("ev_date_et_creneau_to_save", { type: this.type, date: this.date_select, creneau: e }), e.type = this.type, this.$emit("ev_reload_livraison__creneau", e) } } }), Vue.component("type_livraison", { delimiters: ["${", "}"], template: "#template-types-de-livraison", props: { datas: [Object, Array, String, Number], id_html: { type: String, default: "" }, default_type: { type: [String, Number], default: 0 } }, data: function () { return { titre: "Types de livraison", types_livraison: [], show_adresse: !1, adresse_name: "" } }, mounted: function () { this.buildTypes(), this.adresse_name = Cookies.get("wbu_localisation_map"), this.adresse_name && (this.show_adresse = !0) }, watch: { default_type: function () { this.buildTypes() } }, methods: { select_type_tab: function (t, a) { e(".map-localisation-wbu .type-livraison li").removeClass("active"), "li" == t.target.localName ? e(t.target).addClass("active") : "small" == t.target.localName ? e(t.target).parent().parent().addClass("active") : e(t.target).parent().addClass("active"), this.types_livraison[a] ? this.$emit("ev_change_type_livraison", this.types_livraison[a]) : console.log("error") }, display_prise: function (e) { return 0 == e ? "+0€" : "+" + e + "€" }, buildTypes: function () { var a = this, i = t; e.each(i, function (e, t) { t.type == a.default_type && (i[e].active = !0) }), this.types_livraison = i } } }), new Vue({ delimiters: ["${", "}"], el: "#selection_horaire", data: { show_selection: !1, plage_heure: !0, date_recuperation: "", default_creneau_recuperation: "", date_livraison: "", default_creneau_livraison: "", creneau_update_livraison: "", date_from_recuperation: "", plage_mn: 120, re_construction_module: 0, datas: {}, default_type: 0, default_type_static: "free", custom_plage_mn: 120, delai_traitement_en_jour: 3, variants: { 31058498125884: { type: "free", id: 31058498125884 }, 31058498158652: { type: "plus", id: 31058498158652 }, 31058498191420: { type: "express", id: 31058498191420 } }, variant_in_cart: !1, data_tosave_livraison: null, data_tosave_recuperation: null, valid_creneau: !1, valid_localisation: !1, valid_creneau_livraison: !1, valid_creneau_recuperation: !1, default_select_date_recuperation: "", default_select_hour_recuperation: "", default_select_date_livraison: "", default_select_hour_livraison: "", cart: {}, model_ref: "map-google-field" }, mounted: function () { "modulejs.kksa" == window.location.host && (this.show_selection = !0), this.selection_init(), this.loadcart() }, methods: { date_to_save: function (e) { "livraison" == e.type ? this.valid_creneau_livraison = !1 : "recuperation" == e.type && (this.valid_creneau_recuperation = !1), this.valid_creneau = !1 }, date_et_creneau_to_save: function (e) { var t = e.type + "\r\n", a = new Date(this.get_date_for_old_browser(e.date)); t += " Date : " + a.getDate() + "/" + (a.getMonth() + 1) + "/" + a.getFullYear() + "\r\n", t += " Heure : " + e.creneau.h1 + " - " + e.creneau.h2 + "\r\n", "livraison" == e.type && a ? (this.data_tosave_livraison = t, this.valid_creneau_livraison = !0) : "recuperation" == e.type && a && (this.data_tosave_recuperation = t, this.valid_creneau_recuperation = !0, this.valid_creneau_livraison = !1), this.valid_creneau_recuperation && this.valid_creneau_livraison ? (this.valid_creneau = !0, console.log("\n\n Date et creneau à sauvergarder : \n", this.data_tosave_recuperation, this.data_tosave_livraison)) : this.valid_creneau = !1 }, change_type_livraison: function (e) { this.updateTypeLivraison(e); this.add_cover_wait(".map-localisation-wbu"), this.delai_traitement_en_jour = e.delai, this.plage_mn = e.creneau, this.re_construction_module++ }, reload_livraison__date: function (e) { this.date_from_recuperation = null, this.date_livraison = e.year + "-" + (e.month + 1) + "-" + e.date }, reload_livraison__creneau: function (e) { this.creneau_update_livraison = e }, loadcart: function () { var e = this; jQuery.getJSON("/cart.js", function (t) { e.cart = t, e.analyseCart() }) }, selection_init: function () { var t = this; e(".map-localisation-wbu.container .element-visible").css("display", "block"), e('button[name="checkout"]').click(function (a) { if (e(".map-localisation-wbu.container .element-visible").css("display", "block"), t.get_localisation()) if (t.valid_creneau && t.valid_localisation); else { a.preventDefault(); t.hidden_block("#id-cart-form") } }), "?selection=date" == window.location.search && e('button[name="checkout"]').trigger("click") }, apply_checkout: function () { e('button[name="checkout"]').trigger("click"), this.valid_creneau = !1 }, procced_checkout: async function () { if (!this.valid_creneau) return !1; if (console.log(" Go payement "), this.data_tosave_livraison && this.data_tosave_recuperation) { this.valid_creneau = !0; this.add_cover_wait(".map-localisation-wbu"); var e = { attributes: { livraison: this.data_tosave_livraison, recuperation: this.data_tosave_recuperation } }, t = Cookies.get("wbu_localisation_map"); t && (e.attributes.localisation = t, this.valid_localisation = !0), this.valid_localisation || this.open_map(), this.url = "/cart/update"; var a = await this.save_attribute_cart(e); this.valid_localisation && a && await this.apply_checkout() } }, analyseCart: function () { var a = this, i = !1; if (a.cart && a.cart.items) { !async function () { await new Promise(function (n) { return e.each(a.cart.items, function (r, s) { if (a.variants[s.id]) return i = !0, a.variant_in_cart = s.id, e.each(t, function (e, t) { if (s.id == t.id) return a.default_type = t.type, a.datas = t, a.delai_traitement_en_jour = t.delai, a.plage_mn = t.creneau, n("CheckTypeLivraison"), !0 }), !1 }), n("CheckTypeLivraison"), !1 }), await void (i || e.each(a.variants, function (e, t) { t.type == a.default_type_static && (a.addProduct(e), a.default_type = a.default_type_static) })) }() } }, open_map: function () { e("#trigger-simple-map2" + this.model_ref).trigger("click") }, updateTypeLivraison: function (t) { var a = null; e.each(this.variants, function (e, i) { i.type == t.type && (a = i.id) }), a ? this.variant_in_cart ? this.deleteProduct(this.variant_in_cart, a) : this.addProduct(a) : alert("Variante non definit") }, addProduct: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, a = this; jQuery.post("/cart/add", { id: e, quantity: t }).done(function (t) { console.log(" Product add : ", e), a.variant_in_cart = e; a.remove_cover_wait(".map-localisation-wbu") }).fail(function () { "modulejs.kksa" != window.location.host && alert("Votre panier est vide"), setTimeout(function () { a.remove_cover_wait(".map-localisation-wbu") }, 1e3) }) }, save_attribute_cart: function (e) { var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], a = this; return new Promise(function (i) { a.ajax_watch_attribute = 1, jQuery.post(a.url, e).done(function (n) { console.log(" MAJ des attributs : ", e); a.remove_cover_wait(".map-localisation-wbu"), t && (a.ajax_watch_attribute = 2), i(!0) }).fail(function () { a.ajax_watch_attribute = 3, i(!1) }) }) }, deleteProduct: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, a = this, i = { updates: {} }; i.updates[e] = 0, jQuery.post("/cart/update", i).done(function (i) { if (console.log(" Product remove : ", e), t) a.addProduct(t); else { a.remove_cover_wait(".map-localisation-wbu") } }).fail(function () { "modulejs.kksa" != window.location.host && alert("Votre panier est vide"), setTimeout(function () { a.remove_cover_wait(".map-localisation-wbu") }, 1e3) }) }, back_to_cart: function () { this.hidden_block(".map-localisation-wbu", "back") }, get_localisation: function () { var e = Cookies.get("wbu_localisation_map"); if (e) { var t = { attributes: { localisation: e } }; this.url = "/cart/update", this.save_attribute_cart(t, !1), this.check_adress_validate = !0 } else this.check_adress_validate = !1; return !0 }, hidden_block: function (t) { var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "continue", i = this; e(t).addClass("wbu-block-opacity"), "continue" == a ? e(t).animate({ opacity: .5 }, 1e3, "linear", function () { i.show_selection = !0, e(".map-localisation-wbu.container .element-visible").css("display", "block"), e(t).fadeOut(100, function () { e(".map-localisation-wbu.container .element-visible").css("display", "block"), e(t).removeClass("wbu-block-opacity") }) }) : e(t).animate({ opacity: .5 }, 1e3, "linear", function () { i.show_selection = !1, e("#id-cart-form").fadeIn(100, function () { e("#id-cart-form").css({ opacity: 1 }) }) }) }, add_cover_wait: function (t) { e(t).addClass("wbu-block-opacity") }, remove_cover_wait: function (t) { e(t).removeClass("wbu-block-opacity") }, get_date_for_old_browser: function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null; if (!e) return moment(); var t = moment(e); return t.isValid() ? t : (t = e.split("-"))[2] ? (t[1] = t[1].toString().padStart(2, "0"), t[2] = t[2].toString().padStart(2, "0"), moment(t[0] + "-" + t[1] + "-" + t[2])) : moment(e) } } }) });